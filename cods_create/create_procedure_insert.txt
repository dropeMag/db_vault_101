/*----------------------------------------------------
TB_QUARTO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_quarto(in_descricao VARCHAR(50), in_tamanho INTEGER)
BEGIN
	IF fn_calcula_tamanho_string(in_descricao) < 4 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF in_tamanho NOT BETWEEN 1 AND 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tamanho inválido para o quarto.';
	ELSE
		INSERT INTO tb_quartos
			(descricao, tamanho)
        VALUES
			(in_descricao, in_tamanho);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ROUPA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_roupa(in_nome VARCHAR(25), in_qnt INTEGER, in_str INTEGER, in_per INTEGER, in_end INTEGER, in_car INTEGER, in_int INTEGER, in_agi INTEGER, in_luc INTEGER)
BEGIN
	IF (fn_calcula_tamanho_string(in_nome) < 4) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido.';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSEIF ((SELECT nome FROM tb_roupa WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa roupa já foi cadastrada.';
	ELSE
		IF in_str <= 0 THEN SET in_str = NULL; END IF;
		IF in_per <= 0 THEN SET in_per = NULL; END IF;
		IF in_end <= 0 THEN SET in_end = NULL; END IF;
		IF in_car <= 0 THEN SET in_car = NULL; END IF;
		IF in_int <= 0 THEN SET in_int = NULL; END IF;
		IF in_agi <= 0 THEN SET in_agi = NULL; END IF;
		IF in_luc <= 0 THEN SET in_luc = NULL; END IF;
        
        INSERT INTO tb_special
        VALUES (DEFAULT, in_str, in_per, in_end, in_car, in_int, in_agi, in_luc);
        
        INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_roupa
        VALUES (DEFAULT, in_nome, (SELECT MAX(id_special) FROM tb_special),
                                          (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ARMA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_arma(in_nome VARCHAR(25), in_mira VARCHAR(5), in_qnt INTEGER)
BEGIN
	IF (fn_calcula_tamanho_string(in_nome) < 4) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF (fn_calcula_tamanho_string(in_mira) < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A descrição da mira é inválida.';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
   	ELSEIF ((SELECT nome FROM tb_arma WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa arma já foi cadastrada.';
	ELSE
		INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_arma
        VALUES (DEFAULT, in_nome, in_mira, (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PET
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_pet(in_nome VARCHAR(25), in_caract VARCHAR(25), in_qnt INTEGER)
BEGIN
	IF(fn_calcula_tamanho_string(in_nome) < 3) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF (fn_calcula_tamanho_string(in_caract) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho da característica é inválido';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSEIF ((SELECT nome FROM tb_pet WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esse pet já foi cadastrado.';
	ELSE
        INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_pet
        VALUES (DEFAULT, in_nome, in_caract, (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PROFISSAO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_profissao(in_profissao VARCHAR(25))
BEGIN
	IF(fn_calcula_tamanho_string(in_profissao) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF ((SELECT nome FROM tb_profissao WHERE LOWER(nome) = LOWER(in_profissao)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa profissão já foi cadastrada.';
	ELSE
		INSERT INTO tb_profissao
        VALUES (DEFAULT, in_profissao);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_BAIXA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_baixa(in_habitante INTEGER, in_data DATETIME, in_incidente INTEGER, in_quest BOOLEAN)
BEGIN
	IF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_habitante) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante não foi localizado.';
	ELSEIF((SELECT id_baixa FROM tb_habitante WHERE id_habitante = in_habitante) IS NOT NULL) THEN
		IF((SELECT status FROM tb_habitante WHERE id_habitante = in_habitante) <> 1) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Atenção: habitante possui uma baixa, mas está com status ativo; verifique se há algum erro.';
        ELSE
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já possui uma baixa.';
		END IF;
    ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = in_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	ELSEIF(in_quest NOT IN (0, 1)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "A 'quest' só aceita valores booleanos.";
	ELSE
		INSERT INTO tb_baixa
        VALUES (DEFAULT, in_data, in_incidente, in_quest);
        
        UPDATE tb_habitante
        SET status = 1,
		id_baixa = (SELECT MAX(id_baixa) FROM tb_baixa)
        WHERE id_habitante = in_habitante;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_INCIDENTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_incidente(in_data DATETIME, in_tipo_incidente INTEGER)
BEGIN
	IF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = in_tipo_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	ELSE
		INSERT INTO tb_incidentes
        VALUES (DEFAULT, in_data, in_tipo_incidente);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_QUEST
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_quest(in_descricao VARCHAR(50), in_data DATETIME)
BEGIN
	IF fn_calcula_tamanho_string(in_descricao) < 10 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSE
		INSERT INTO tb_quest
			(descricao, data)
        VALUES
			(in_descricao, in_data);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_HABITANTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_habitante(in_nome VARCHAR(25), in_sexo CHAR(1), in_level INTEGER, in_str INTEGER, in_per INTEGER, in_end INTEGER, in_car INTEGER, in_int INTEGER, in_agi INTEGER, in_luc INTEGER, in_mae INTEGER, in_pai INTEGER)
BEGIN
	IF in_str <= 0 THEN SET in_str = NULL; END IF;
	IF in_per <= 0 THEN SET in_per = NULL; END IF;
	IF in_end <= 0 THEN SET in_end = NULL; END IF;
	IF in_car <= 0 THEN SET in_car = NULL; END IF;
	IF in_int <= 0 THEN SET in_int = NULL; END IF;
	IF in_agi <= 0 THEN SET in_agi = NULL; END IF;
	IF in_luc <= 0 THEN SET in_luc = NULL; END IF;

	IF(fn_calcula_tamanho_string(in_nome) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Nome inválido; Muito curto.';
	ELSEIF(LOWER(in_sexo) NOT IN ('m', 'f')) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Só é permitido sexo (m)asculino e (f)eminino.';
	END IF;
    
    IF(in_level < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está abaixo do mínimo permitido.';
	ELSEIF(in_level > 50) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está acima do máximo permitido.';
	END IF ;
    
    IF(in_mae IS NULL) THEN
		SET in_mae = NULL;
	ELSEIF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_mae) IS NULL) OR 
		  ((SELECT sexo FROM tb_habitante WHERE id_habitante = in_mae) != 'f')THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_mae é inválido.';
	END IF ;
    
    IF(in_pai IS NULL) THEN
		SET in_pai = NULL;
	ELSEIF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_pai) IS NULL) OR 
		  ((SELECT sexo FROM tb_habitante WHERE id_habitante = in_pai) != 'm')THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_pai é inválido.';
	END IF;
    
	INSERT INTO tb_special
	VALUES (DEFAULT, in_str, in_per, in_end, in_car, in_int, in_agi, in_luc);
	
	IF(in_mae IS NULL) OR (in_pai IS NULL) THEN
		INSERT INTO tb_habitante
			(nome, sexo, level, id_special)
		VALUES
			(in_nome, LOWER(in_sexo), in_level, (SELECT MAX(id_special) FROM tb_special));
	ELSE
		INSERT INTO tb_filiacao
		VALUES (DEFAULT, in_pai, in_mae);
	
		INSERT INTO tb_habitante
			(nome, sexo, level, id_special, id_filiacao)
		VALUES
			(in_nome, LOWER(in_sexo), in_level, (SELECT MAX(id_special) FROM tb_special), (SELECT MAX(id_filiacao) FROM tb_filiacao));
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_VENDA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_venda(in_produto INTEGER, in_lucro INTEGER, in_data DATETIME, in_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = in_produto);

	IF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = in_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	ELSEIF(in_lucro < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido lucro negativo.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF(in_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
	ELSEIF(produto_estoque < in_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da venda é inválida.';
    ELSE
		INSERT INTO tb_venda
        VALUES (DEFAULT, in_produto, in_lucro, in_data, in_quantidade);
		
        UPDATE tb_estoque
        SET quantidade = (produto_estoque - in_quantidade)
        WHERE id_estoque = in_produto;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_RECICLAGEM
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_reciclagem(in_produto INTEGER, in_lucro VARCHAR(100), in_data DATETIME, in_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = in_produto);

	IF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = in_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	ELSEIF(fn_calcula_tamanho_string(in_lucro) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O lucro é inválido; Muito curto.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF(in_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
	ELSEIF(produto_estoque < in_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da reciclagem é inválida.';
    ELSE
		INSERT INTO tb_reciclagem
        VALUES (DEFAULT, in_produto, in_lucro, in_data, in_quantidade);
		
        UPDATE tb_estoque
        SET quantidade = (produto_estoque - in_quantidade)
        WHERE id_estoque = in_produto;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_DIARIO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_diario(in_dinheiro INTEGER, in_luz VARCHAR(9), in_comida VARCHAR(9), in_agua VARCHAR(9))
BEGIN
	INSERT INTO tb_diario
    VALUES (NOW(),
			(SELECT COUNT(*) FROM tb_habitante),
            in_dinheiro,
            (SELECT COUNT(*) FROM tb_quest),
            (SELECT COUNT(*) FROM tb_quarto),
            (SELECT COUNT(*) FROM tb_incidentes),
            in_luz,
            in_comida,
            in_agua,
            ((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_roupa)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_roupa IS NOT NULL)),
			((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_arma)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_arma IS NOT NULL)),
            ((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_pet)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_pet IS NOT NULL)));
END //
DELIMITER ;