CREATE DATABASE IF NOT EXISTS db_vault_101
COLLATE utf8mb4_general_ci
CHARSET utf8mb4;

USE db_vault_101;

CREATE TABLE IF NOT EXISTS tb_estoque(
	id_estoque INTEGER AUTO_INCREMENT,
	quantidade INTEGER UNSIGNED NOT NULL,
PRIMARY KEY(id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_special(
	id_special INTEGER AUTO_INCREMENT,
    strength TINYINT UNSIGNED,
    perception TINYINT UNSIGNED,
    endurance TINYINT UNSIGNED,
    charisma TINYINT UNSIGNED,
    intelligence TINYINT UNSIGNED,
    agility TINYINT UNSIGNED,
    luck TINYINT UNSIGNED,
PRIMARY KEY(id_special)
);

CREATE TABLE IF NOT EXISTS tb_quarto(
	id_quarto INTEGER AUTO_INCREMENT,
    descricao VARCHAR(50) NOT NULL,
    tamanho TINYINT UNSIGNED NOT NULL,
PRIMARY KEY(id_quarto)
);

CREATE TABLE IF NOT EXISTS tb_tipo_incidente(
	id_incidente INTEGER AUTO_INCREMENT,
    descricao VARCHAR(15) NOT NULL,
PRIMARY KEY(id_incidente)
);

CREATE TABLE IF NOT EXISTS tb_incidente(
	id_incidente INTEGER AUTO_INCREMENT,
    data DATETIME NOT NULL,
    id_tipo_incidente INTEGER NOT NULL,
PRIMARY KEY(id_incidente),
CONSTRAINT fk_tipo_incidente_tb_incidente
    FOREIGN KEY (id_tipo_incidente)
    REFERENCES tb_tipo_incidente (id_incidente)
);

CREATE TABLE IF NOT EXISTS tb_quest(
	id_quest INTEGER AUTO_INCREMENT,
    descricao VARCHAR(50) NOT NULL,
    data DATETIME NOT NULL,
PRIMARY KEY(id_quest)
);

CREATE TABLE IF NOT EXISTS tb_filiacao(
	id_filiacao INTEGER AUTO_INCREMENT,
    id_pai INTEGER NOT NULL,
    id_mae INTEGER NOT NULL,
PRIMARY KEY(id_filiacao),
UNIQUE(id_pai, id_mae)
);

CREATE TABLE IF NOT EXISTS tb_profissao(
	id_profissao INTEGER AUTO_INCREMENT,
    nome VARCHAR(25) NOT NULL,
PRIMARY KEY(id_profissao)
);

CREATE TABLE IF NOT EXISTS tb_baixa(
	id_baixa INTEGER AUTO_INCREMENT,
    data DATETIME NOT NULL,
    id_incidente INTEGER NOT NULL,
    quest BOOLEAN NOT NULL,
PRIMARY KEY(id_baixa),
CONSTRAINT fk_incidente_tb_baixa
    FOREIGN KEY (id_incidente)
    REFERENCES tb_tipo_incidente (id_incidente)
);

CREATE TABLE IF NOT EXISTS tb_roupa(
	id_roupa INTEGER AUTO_INCREMENT,
    nome VARCHAR(25) NOT NULL,
    id_special INTEGER NOT NULL,
    id_estoque INTEGER NOT NULL,
PRIMARY KEY(id_roupa),
UNIQUE(id_special),
UNIQUE(id_estoque),
CONSTRAINT fk_special_tb_roupa
    FOREIGN KEY (id_special)
    REFERENCES tb_special (id_special),
CONSTRAINT fk_estoque_tb_roupa
    FOREIGN KEY (id_estoque)
    REFERENCES tb_estoque (id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_pet(
	id_pet INTEGER AUTO_INCREMENT,
    nome VARCHAR(25) NOT NULL,
    caracteristica VARCHAR(25) NOT NULL,
    id_estoque INTEGER NOT NULL,
PRIMARY KEY(id_pet),
UNIQUE(id_estoque),
CONSTRAINT fk_id_estoque_tb_pet
    FOREIGN KEY (id_estoque)
    REFERENCES tb_estoque (id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_arma(
	id_arma INTEGER AUTO_INCREMENT,
    nome VARCHAR(25) NOT NULL,
    mira VARCHAR(5) NOT NULL,
    id_estoque INTEGER NOT NULL,
PRIMARY KEY(id_arma),
UNIQUE(id_estoque),
CONSTRAINT fk_id_estoque_tb_arma
    FOREIGN KEY (id_estoque)
    REFERENCES tb_estoque (id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_venda(
	id_venda INTEGER AUTO_INCREMENT,
    id_produto INTEGER NOT NULL,
    lucro INTEGER UNSIGNED NOT NULL,
    data DATETIME NOT NULL,
    quantidade TINYINT UNSIGNED NOT NULL,
PRIMARY KEY(id_venda),
CONSTRAINT fk_produto_tb_venda
    FOREIGN KEY (id_produto)
    REFERENCES tb_estoque (id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_reciclagem(
	id_reciclagem INTEGER AUTO_INCREMENT,
    id_produto INTEGER NOT NULL,
    lucro VARCHAR(100) NOT NULL,
    data DATETIME NOT NULL,
    quantidade TINYINT UNSIGNED NOT NULL,
PRIMARY KEY(id_reciclagem),
CONSTRAINT fk_produto_tb_reciclagem
    FOREIGN KEY (id_produto)
    REFERENCES tb_estoque (id_estoque)
);

CREATE TABLE IF NOT EXISTS tb_habitante(
	id_habitante INTEGER AUTO_INCREMENT,
    nome VARCHAR(25) NOT NULL,
    sexo CHAR(1) NOT NULL,
    level TINYINT UNSIGNED NOT NULL,
    status BOOLEAN DEFAULT(0) NOT NULL,
    id_special INTEGER NOT NULL,
    id_profissao INTEGER,
    id_roupa INTEGER,
    id_arma INTEGER,
    id_pet INTEGER,
    id_filiacao INTEGER,
    id_baixa INTEGER,
    id_quarto INTEGER,
PRIMARY KEY(id_habitante),
UNIQUE (id_special),
UNIQUE (id_baixa),
UNIQUE (id_pet),
CONSTRAINT fk_special_tb_habitante
	FOREIGN KEY (id_special)
    REFERENCES tb_special (id_special),
CONSTRAINT fk_profissao_tb_habitante
	FOREIGN KEY (id_profissao)
    REFERENCES tb_profissao (id_profissao),
CONSTRAINT fk_roupa_tb_habitante
	FOREIGN KEY (id_roupa)
    REFERENCES tb_roupa (id_roupa),
CONSTRAINT fk_arma_tb_habitante
	FOREIGN KEY (id_arma)
    REFERENCES tb_arma (id_arma),
CONSTRAINT fk_pet_tb_habitante
	FOREIGN KEY (id_pet)
    REFERENCES tb_pet (id_pet),
CONSTRAINT fk_filiacao_tb_habitante
	FOREIGN KEY (id_filiacao)
    REFERENCES tb_filiacao (id_filiacao),
CONSTRAINT fk_baixa_tb_habitante
	FOREIGN KEY (id_baixa)
    REFERENCES tb_baixa (id_baixa),
CONSTRAINT fk_quarto_tb_habitante
	FOREIGN KEY (id_quarto)
    REFERENCES tb_quarto (id_quarto)
);

CREATE TABLE IF NOT EXISTS tb_diario(
	id_diario INTEGER AUTO_INCREMENT,
	data DATETIME NOT NULL,
    moradores INTEGER UNSIGNED NOT NULL,
    dinheiro INTEGER UNSIGNED NOT NULL,
    quests INTEGER UNSIGNED NOT NULL,
    quartos INTEGER UNSIGNED NOT NULL,
    incidentes INTEGER UNSIGNED NOT NULL,
    luz VARCHAR(9) NOT NULL,
    comida VARCHAR(9) NOT NULL,
    agua VARCHAR(9) NOT NULL,
	roupa INTEGER UNSIGNED NOT NULL,
    arma INTEGER UNSIGNED NOT NULL,
    pet INTEGER UNSIGNED NOT NULL,
PRIMARY KEY(id_diario)
);

CREATE TABLE IF NOT EXISTS tb_ganho_quest(
    id_estoque INTEGER NOT NULL,
    id_quest INTEGER NOT NULL,
PRIMARY KEY (id_estoque, id_quest),
CONSTRAINT fk_id_estoque_tb_ganho_quest
    FOREIGN KEY (id_estoque)
    REFERENCES tb_estoque (id_estoque),
CONSTRAINT fk_id_quests_tb_ganho_quest
    FOREIGN KEY (id_quest)
    REFERENCES tb_quest (id_quest)
);

CREATE TABLE IF NOT EXISTS tb_habitante_quest(
    id_habitante INTEGER NOT NULL,
    id_quest INTEGER NOT NULL,
PRIMARY KEY (id_habitante, id_quest),
CONSTRAINT fk_id_habitante_tb_habitante_quest
    FOREIGN KEY (id_habitante)
    REFERENCES tb_habitante (id_habitante),
CONSTRAINT fk_id_quest_tb_habitante_quest
    FOREIGN KEY (id_quest)
    REFERENCES tb_quest (id_quest)
);

ALTER TABLE tb_filiacao
ADD CONSTRAINT fk_id_pai_tb_filiacao
	FOREIGN KEY (id_pai)
    REFERENCES tb_habitante (id_habitante);
    
ALTER TABLE tb_filiacao
ADD CONSTRAINT fk_id_mae_tb_filiacao
	FOREIGN KEY (id_mae)
    REFERENCES tb_habitante (id_habitante);

DELIMITER //
CREATE FUNCTION fn_calcula_tamanho_string(texto VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	SET texto = REPLACE(texto, 'á', 'a'),
		texto = REPLACE(texto, 'à', 'a'),
		texto = REPLACE(texto, 'ã', 'a'),
		texto = REPLACE(texto, 'â', 'a'),
		texto = REPLACE(texto, 'ä', 'a'),
		texto = REPLACE(texto, 'Á', 'A'),
		texto = REPLACE(texto, 'À', 'A'),
		texto = REPLACE(texto, 'Ã', 'A'),
		texto = REPLACE(texto, 'Â', 'A'),
		texto = REPLACE(texto, 'Ä', 'A'),
		 
		texto = REPLACE(texto, 'é', 'e'),
		texto = REPLACE(texto, 'è', 'e'),
		texto = REPLACE(texto, 'ê', 'e'),
		texto = REPLACE(texto, 'É', 'E'),
		texto = REPLACE(texto, 'È', 'E'),
		texto = REPLACE(texto, 'Ê', 'E'),
		 
		texto = REPLACE(texto, 'í', 'i'),
		texto = REPLACE(texto, 'ì', 'i'),
		texto = REPLACE(texto, 'Í', 'I'),
		texto = REPLACE(texto, 'Ì', 'I'),
		 
		texto = REPLACE(texto, 'ó', 'o'),
		texto = REPLACE(texto, 'ò', 'o'),
		texto = REPLACE(texto, 'õ', 'o'),
		texto = REPLACE(texto, 'ô', 'o'),
		texto = REPLACE(texto, 'ö', 'o'),
		texto = REPLACE(texto, 'Ó', 'O'),
		texto = REPLACE(texto, 'Ò', 'O'),
		texto = REPLACE(texto, 'Õ', 'O'),
		texto = REPLACE(texto, 'Ô', 'O'),
		texto = REPLACE(texto, 'Ö', 'O'),
		
		texto = REPLACE(texto, 'ú', 'u'),
		texto = REPLACE(texto, 'ù', 'u'),
		texto = REPLACE(texto, 'ü', 'u'),
		texto = REPLACE(texto, 'Ú', 'U'),
		texto = REPLACE(texto, 'Ù', 'U'),
		texto = REPLACE(texto, 'Ü', 'U'),
		
		texto = REPLACE(texto, '  ', ' '),
		texto = REPLACE(texto, '´', ''),
		texto = REPLACE(texto, '`', ''),
		texto = REPLACE(texto, '~', ''),
		texto = REPLACE(texto, '^', ''),
		texto = REPLACE(texto, '¨', '');
	
    RETURN LENGTH(TRIM(texto));
END//
DELIMITER ;

/*----------------------------------------------------
TB_QUARTO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_quarto(in_descricao VARCHAR(50), in_tamanho INTEGER)
BEGIN
	IF fn_calcula_tamanho_string(in_descricao) < 4 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF in_tamanho NOT BETWEEN 1 AND 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tamanho inválido para o quarto.';
	ELSE
		INSERT INTO tb_quartos
			(descricao, tamanho)
        VALUES
			(in_descricao, in_tamanho);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ROUPA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_roupa(in_nome VARCHAR(25), in_qnt INTEGER, in_str INTEGER, in_per INTEGER, in_end INTEGER, in_car INTEGER, in_int INTEGER, in_agi INTEGER, in_luc INTEGER)
BEGIN
	IF (fn_calcula_tamanho_string(in_nome) < 4) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido.';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSEIF ((SELECT nome FROM tb_roupa WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa roupa já foi cadastrada.';
	ELSE
		IF in_str <= 0 THEN SET in_str = NULL; END IF;
		IF in_per <= 0 THEN SET in_per = NULL; END IF;
		IF in_end <= 0 THEN SET in_end = NULL; END IF;
		IF in_car <= 0 THEN SET in_car = NULL; END IF;
		IF in_int <= 0 THEN SET in_int = NULL; END IF;
		IF in_agi <= 0 THEN SET in_agi = NULL; END IF;
		IF in_luc <= 0 THEN SET in_luc = NULL; END IF;
        
        INSERT INTO tb_special
        VALUES (DEFAULT, in_str, in_per, in_end, in_car, in_int, in_agi, in_luc);
        
        INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_roupa
        VALUES (DEFAULT, in_nome, (SELECT MAX(id_special) FROM tb_special),
                                          (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ARMA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_arma(in_nome VARCHAR(25), in_mira VARCHAR(5), in_qnt INTEGER)
BEGIN
	IF (fn_calcula_tamanho_string(in_nome) < 4) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF (fn_calcula_tamanho_string(in_mira) < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A descrição da mira é inválida.';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
   	ELSEIF ((SELECT nome FROM tb_arma WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa arma já foi cadastrada.';
	ELSE
		INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_arma
        VALUES (DEFAULT, in_nome, in_mira, (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PET
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_pet(in_nome VARCHAR(25), in_caract VARCHAR(25), in_qnt INTEGER)
BEGIN
	IF(fn_calcula_tamanho_string(in_nome) < 3) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF (fn_calcula_tamanho_string(in_caract) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho da característica é inválido';
	ELSEIF (in_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSEIF ((SELECT nome FROM tb_pet WHERE LOWER(nome) = LOWER(in_nome)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esse pet já foi cadastrado.';
	ELSE
        INSERT INTO tb_estoque
        VALUES (DEFAULT, in_qnt);
        
        INSERT INTO tb_pet
        VALUES (DEFAULT, in_nome, in_caract, (SELECT MAX(id_estoque) FROM tb_estoque));
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PROFISSAO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_profissao(in_profissao VARCHAR(25))
BEGIN
	IF(fn_calcula_tamanho_string(in_profissao) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF ((SELECT nome FROM tb_profissao WHERE LOWER(nome) = LOWER(in_profissao)) IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Essa profissão já foi cadastrada.';
	ELSE
		INSERT INTO tb_profissao
        VALUES (DEFAULT, in_profissao);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_BAIXA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_baixa(in_habitante INTEGER, in_data DATETIME, in_incidente INTEGER, in_quest BOOLEAN)
BEGIN
	IF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_habitante) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante não foi localizado.';
	ELSEIF((SELECT id_baixa FROM tb_habitante WHERE id_habitante = in_habitante) IS NOT NULL) THEN
		IF((SELECT status FROM tb_habitante WHERE id_habitante = in_habitante) <> 1) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Atenção: habitante possui uma baixa, mas está com status ativo; verifique se há algum erro.';
        ELSE
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já possui uma baixa.';
		END IF;
    ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = in_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	ELSEIF(in_quest NOT IN (0, 1)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "A 'quest' só aceita valores booleanos.";
	ELSE
		INSERT INTO tb_baixa
        VALUES (DEFAULT, in_data, in_incidente, in_quest);
        
        UPDATE tb_habitante
        SET status = 1,
		id_baixa = (SELECT MAX(id_baixa) FROM tb_baixa)
        WHERE id_habitante = in_habitante;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_INCIDENTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_incidente(in_data DATETIME, in_tipo_incidente INTEGER)
BEGIN
	IF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = in_tipo_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	ELSE
		INSERT INTO tb_incidente
        VALUES (DEFAULT, in_data, in_tipo_incidente);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_QUEST
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_quest(in_descricao VARCHAR(50), in_data DATETIME)
BEGIN
	IF fn_calcula_tamanho_string(in_descricao) < 10 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSE
		INSERT INTO tb_quest
			(descricao, data)
        VALUES
			(in_descricao, in_data);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_HABITANTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_habitante(in_nome VARCHAR(25), in_sexo CHAR(1), in_level INTEGER, in_str INTEGER, in_per INTEGER, in_end INTEGER, in_car INTEGER, in_int INTEGER, in_agi INTEGER, in_luc INTEGER, in_mae INTEGER, in_pai INTEGER)
BEGIN
	IF in_str <= 0 THEN SET in_str = NULL; END IF;
	IF in_per <= 0 THEN SET in_per = NULL; END IF;
	IF in_end <= 0 THEN SET in_end = NULL; END IF;
	IF in_car <= 0 THEN SET in_car = NULL; END IF;
	IF in_int <= 0 THEN SET in_int = NULL; END IF;
	IF in_agi <= 0 THEN SET in_agi = NULL; END IF;
	IF in_luc <= 0 THEN SET in_luc = NULL; END IF;

	IF(fn_calcula_tamanho_string(in_nome) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Nome inválido; Muito curto.';
	ELSEIF(LOWER(in_sexo) NOT IN ('m', 'f')) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Só é permitido sexo (m)asculino e (f)eminino.';
	END IF;
    
    IF(in_level < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está abaixo do mínimo permitido.';
	ELSEIF(in_level > 50) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está acima do máximo permitido.';
	END IF ;
    
    IF(in_mae IS NULL) THEN
		SET in_mae = NULL;
	ELSEIF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_mae) IS NULL) OR 
		  ((SELECT sexo FROM tb_habitante WHERE id_habitante = in_mae) != 'f')THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_mae é inválido.';
	END IF ;
    
    IF(in_pai IS NULL) THEN
		SET in_pai = NULL;
	ELSEIF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = in_pai) IS NULL) OR 
		  ((SELECT sexo FROM tb_habitante WHERE id_habitante = in_pai) != 'm')THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_pai é inválido.';
	END IF;
    
	INSERT INTO tb_special
	VALUES (DEFAULT, in_str, in_per, in_end, in_car, in_int, in_agi, in_luc);
	
	IF(in_mae IS NULL) OR (in_pai IS NULL) THEN
		INSERT INTO tb_habitante
			(nome, sexo, level, id_special)
		VALUES
			(in_nome, LOWER(in_sexo), in_level, (SELECT MAX(id_special) FROM tb_special));
	ELSE
		INSERT INTO tb_filiacao
		VALUES (DEFAULT, in_pai, in_mae);
	
		INSERT INTO tb_habitante
			(nome, sexo, level, id_special, id_filiacao)
		VALUES
			(in_nome, LOWER(in_sexo), in_level, (SELECT MAX(id_special) FROM tb_special), (SELECT MAX(id_filiacao) FROM tb_filiacao));
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_VENDA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_venda(in_produto INTEGER, in_lucro INTEGER, in_data DATETIME, in_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = in_produto);

	IF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = in_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	ELSEIF(in_lucro < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido lucro negativo.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF(in_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
	ELSEIF(produto_estoque < in_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da venda é inválida.';
    ELSE
		INSERT INTO tb_venda
        VALUES (DEFAULT, in_produto, in_lucro, in_data, in_quantidade);
		
        UPDATE tb_estoque
        SET quantidade = (produto_estoque - in_quantidade)
        WHERE id_estoque = in_produto;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_RECICLAGEM
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_reciclagem(in_produto INTEGER, in_lucro VARCHAR(100), in_data DATETIME, in_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = in_produto);

	IF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = in_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	ELSEIF(fn_calcula_tamanho_string(in_lucro) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O lucro é inválido; Muito curto.';
	ELSEIF(in_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	ELSEIF(in_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
	ELSEIF(produto_estoque < in_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da reciclagem é inválida.';
    ELSE
		INSERT INTO tb_reciclagem
        VALUES (DEFAULT, in_produto, in_lucro, in_data, in_quantidade);
		
        UPDATE tb_estoque
        SET quantidade = (produto_estoque - in_quantidade)
        WHERE id_estoque = in_produto;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_DIARIO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_insert_diario(in_dinheiro INTEGER, in_luz VARCHAR(9), in_comida VARCHAR(9), in_agua VARCHAR(9))
BEGIN
	INSERT INTO tb_diario
    VALUES (NOW(),
			(SELECT COUNT(*) FROM tb_habitante),
            in_dinheiro,
            (SELECT COUNT(*) FROM tb_quest),
            (SELECT COUNT(*) FROM tb_quarto),
            (SELECT COUNT(*) FROM tb_incidente),
            in_luz,
            in_comida,
            in_agua,
            ((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_roupa)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_roupa IS NOT NULL)),
			((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_arma)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_arma IS NOT NULL)),
            ((SELECT SUM(quantidade) FROM tb_estoque WHERE id_estoque IN (SELECT id_estoque FROM tb_pet)) + (SELECT COUNT(*) FROM tb_habitante WHERE id_pet IS NOT NULL)));
END //
DELIMITER ;

/*----------------------------------------------------
TB_QUARTO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_quarto(up_id INTEGER, up_descricao VARCHAR(50), up_tamanho INTEGER)
BEGIN
	DECLARE var_descricao VARCHAR(50);
	DECLARE var_tamanho INTEGER;
    
    IF((SELECT id_quarto FROM tb_quarto WHERE id_quarto = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_quarto não existe.';
    ELSEIF (fn_calcula_tamanho_string(up_descricao) < 4) OR (NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF up_tamanho NOT BETWEEN 1 AND 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tamanho inválido para o quarto.';
	ELSE
		IF (up_descricao IS NULL) THEN
			SET var_descricao = (SELECT descricao FROM tb_quarto WHERE id_quarto = up_id);
		ELSE
			SET var_descricao = up_descricao;
		END IF;
        
		IF (up_tamanho IS NULL) THEN
			SET var_tamanho = (SELECT tamanho FROM tb_quarto WHERE id_quarto = up_id);
		ELSE
			SET var_tamanho = up_tamanho;
		END IF;
        
		UPDATE tb_quarto
        SET descricao = var_descricao,
			tamanho = var_tamanho
		WHERE id_quarto = up_id;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ROUPA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_roupa(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF ((SELECT id_roupa FROM tb_roupa WHERE id_roupa = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_roupa não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = up_id);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ARMA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_arma(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF((SELECT id_arma FROM tb_arma WHERE id_arma = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_arma não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = up_id);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PET
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_pet(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF((SELECT id_pet FROM tb_pet WHERE id_pet = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_pet não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = up_id);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PROFISSAO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_profissao(up_id INTEGER, up_profissao VARCHAR(25))
BEGIN
	IF(fn_calcula_tamanho_string(up_profissao) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF((SELECT id_profissao FROM tb_profissao WHERE id_profissao = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_profissao não existe';
	ELSE
		UPDATE tb_profissao
        SET nome = up_profissao
        WHERE id_profissao = up_id;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_BAIXA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_baixa(up_id INTEGER, up_habitante INTEGER, up_data DATETIME, up_incidente INTEGER, up_quest BOOLEAN)
BEGIN
	IF((SELECT id_baixa FROM tb_baixa WHERE id_baixa = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_baixa não existe.';
	END IF;

	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras';
	END IF;
    
	IF(up_incidente IS NULL) THEN
		SET up_incidente = (SELECT id_incidente FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = up_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe';
	END IF;

	IF(up_quest IS NULL) THEN
		SET up_quest = (SELECT quest FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF(up_quest NOT IN (0, 1)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "A 'quest' só aceita valores booleanos.";
	END IF;
    
	IF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = up_habitante) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante não foi localizado.';
	ELSEIF(up_habitante IS NULL) THEN
		UPDATE tb_baixa
		SET data = up_data,
			id_incidente = up_incidente,
			quest = up_quest
		WHERE id_baixa = up_id;
	ELSE
		UPDATE tb_habitante
		SET status = 0,
			id_baixa = NULL
		WHERE id_baixa = up_id;            

        UPDATE tb_habitante
		SET status = 1,
			id_baixa = up_id
		WHERE id_habitante = up_habitante;
		
		UPDATE tb_baixa
		SET data = up_data,
			id_incidente = up_incidente,
			quest = up_quest
		WHERE id_baixa = up_id;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_INCIDENTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_incidente(up_id INTEGER, up_data DATETIME, up_tipo_incidente INTEGER)
BEGIN
	IF((SELECT id_incidente FROM tb_incidente WHERE id_incidente = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_incidente não existe.';
	END IF;
    
    IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_incidente WHERE id_incidente = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
    IF(up_tipo_incidente IS NULL) THEN
		SET up_tipo_incidente = (SELECT id_tipo_incidente FROM tb_incidente WHERE id_incidente = up_id);
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = up_tipo_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	END IF;

	UPDATE tb_incidente
    SET data = up_data,
		id_tipo_incidente = up_tipo_incidente
	WHERE id_incidente = up_id;
END //
DELIMITER ;




/*----------------------------------------------------
TB_QUEST
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_quest(up_id INTEGER, up_descricao VARCHAR(50), up_data DATETIME)
BEGIN
	IF((SELECT id_quest FROM tb_quest WHERE id_quest = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_quest não existe.';
	END IF;
    
	IF(up_descricao IS NULL) THEN
		SET up_descricao = (SELECT descricao FROM tb_quest WHERE id_quest = up_id);
	ELSEIF fn_calcula_tamanho_string(up_descricao) < 10 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	END IF;
    
    IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_quest WHERE id_quest = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;

	UPDATE tb_quest
    SET data = up_data,
		descricao = up_descricao
	WHERE id_quest = up_id;
END //
DELIMITER ;




/*----------------------------------------------------
TB_HABITANTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_atualizador(at_roupa INTEGER, at_arma INTEGER, at_pet INTEGER)
BEGIN
	DECLARE roupa_estoque INTEGER;
	DECLARE arma_estoque INTEGER;
	DECLARE pet_estoque INTEGER;
    SET roupa_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = at_roupa));
    SET arma_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = at_arma));
    SET pet_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = at_pet));

	IF(at_roupa IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = roupa_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = at_roupa);
    END IF;
    
    IF(at_arma IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = arma_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = at_arma);
    END IF;
    
    IF(at_pet IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = pet_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = at_pet);
	END IF;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_update_habitante(up_id INTEGER, up_nome VARCHAR(25), up_level INTEGER, up_profissao INTEGER, up_roupa INTEGER, up_arma INTEGER, up_pet INTEGER, up_quarto INTEGER)
BEGIN
	IF ((SELECT id_habitante FROM tb_habitante WHERE id_habitante = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_habitante não existe.';
	END IF;

	IF(fn_calcula_tamanho_string(up_nome) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Nome inválido; Muito curto.';
	END IF;
	
    IF(up_level IS NULL) THEN
		SET up_level = (SELECT level FROM tb_habitante WHERE id_habitante = up_id);
	ELSEIF(up_level < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está abaixo do mínimo permitido.';
	ELSEIF(up_level > 50) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está acima do máximo permitido.';
	END IF;
    
    IF(up_profissao IS NULL) THEN
		SET up_profissao = NULL;
	ELSEIF((SELECT id_profissao FROM tb_habitante WHERE id_habitante = up_id) = up_profissao) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa profissão.';
    ELSEIF((SELECT id_profissao FROM tb_profissao WHERE id_profissao = up_profissao) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta profissão não existe.';
    END IF;
    
    IF(up_roupa IS NULL) THEN
		SET up_roupa = NULL;
	ELSEIF((SELECT id_roupa FROM tb_habitante WHERE id_habitante = up_id) = up_roupa) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa roupa.';
    ELSEIF((SELECT id_roupa FROM tb_roupa WHERE id_roupa = up_roupa) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta roupa não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = up_roupa)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem esta roupa no estoque.';
    END IF;

    IF(up_arma IS NULL) THEN
		SET up_arma = NULL;
	ELSEIF((SELECT id_arma FROM tb_habitante WHERE id_habitante = up_id) = up_arma) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa arma.';
    ELSEIF((SELECT id_arma FROM tb_arma WHERE id_arma = up_arma) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta arma não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = up_arma)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem esta arma no estoque.';
    END IF;
    
    IF(up_pet IS NULL) THEN
		SET up_pet = NULL;
	ELSEIF((SELECT id_pet FROM tb_habitante WHERE id_habitante = up_id) = up_pet) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com esse pet.';
    ELSEIF((SELECT id_pet FROM tb_pet WHERE id_pet = up_pet) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este pet não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = up_pet)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem este pet no estoque.';
    END IF;
    
    IF(up_quarto IS NULL) THEN
		SET up_quarto = NULL;
	ELSEIF((SELECT id_quarto FROM tb_habitante WHERE id_habitante = up_id) = up_quarto) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está nesse quarto.';
    ELSEIF((SELECT id_quarto FROM tb_quarto WHERE id_quarto = up_quarto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este quarto não existe.';
    END IF;
    
	UPDATE tb_habitante
	SET nome = up_nome,
		level = up_level,
        id_profissao = up_profissao,
        id_roupa = up_roupa, 
        id_arma = up_arma, 
        id_pet = up_pet, 
        id_quarto = up_quarto
	WHERE id_habitante = up_id;
    
    CALL sp_atualizador(up_roupa, up_arma, up_pet);
END //
DELIMITER ;




/*----------------------------------------------------
TB_VENDA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_venda(up_id INTEGER, up_produto INTEGER, up_lucro INTEGER, up_data DATETIME, up_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
	DECLARE quantidade_antiga INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = up_produto);
    SET quantidade_antiga = (SELECT quantidade FROM tb_venda WHERE id_venda = up_id);

	IF(up_produto IS NULL) THEN
		SET up_produto = (SELECT id_produto FROM tb_venda WHERE id_venda = up_id);
    ELSEIF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = up_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	END IF;
    
	IF(up_lucro IS NULL) THEN
		SET up_lucro = (SELECT lucro FROM tb_venda WHERE id_venda = up_id);
	ELSEIF(up_lucro < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido lucro negativo.';
	END IF;
    
	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_venda WHERE id_venda = up_id);
    ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
	IF(up_quantidade IS NULL) THEN
		SET up_quantidade = (SELECT quantidade FROM tb_venda WHERE id_venda = up_id);
    ELSEIF(up_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
    ELSEIF((produto_estoque + quantidade_antiga) < up_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da venda é inválida.';
	END IF;

    UPDATE tb_venda
    SET id_produto = up_produto,
		lucro = up_lucro,
        data = up_data,
        quantidade = up_quantidade
	WHERE id_venda = up_id;

	UPDATE tb_estoque
	SET quantidade = (produto_estoque - (up_quantidade - quantidade_antiga))
	WHERE id_estoque = up_produto;
END //
DELIMITER ;




/*----------------------------------------------------
TB_RECICLAGEM
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_reciclagem(up_id INTEGER, up_produto INTEGER, up_lucro VARCHAR(100), up_data DATETIME, up_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
	DECLARE quantidade_antiga INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = up_produto);
    SET quantidade_antiga = (SELECT quantidade FROM tb_reciclagem WHERE id_reciclagem = up_id);

	IF(up_produto IS NULL) THEN
		SET up_produto = (SELECT id_produto FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = up_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	END IF;
    
	IF(up_lucro IS NULL) THEN
		SET up_lucro = (SELECT lucro FROM tb_reciclagem WHERE id_reciclagem = up_id);
	ELSEIF(fn_calcula_tamanho_string(in_lucro) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O lucro é inválido; Muito curto.';
	END IF;
    
	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
	IF(up_quantidade IS NULL) THEN
		SET up_quantidade = (SELECT quantidade FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF(up_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
    ELSEIF((produto_estoque + quantidade_antiga) < up_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da reciclagem é inválida.';
	END IF;

    UPDATE tb_reciclagem
    SET id_produto = up_produto,
		lucro = up_lucro,
        data = up_data,
        quantidade = up_quantidade
	WHERE id_reciclagem = up_id;

	UPDATE tb_estoque
	SET quantidade = (produto_estoque - (up_quantidade - quantidade_antiga))
	WHERE id_estoque = up_produto;
END //
DELIMITER ;




/*----------------------------------------------------
TB_DIARIO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_diario(up_id INTEGER, up_dinheiro INTEGER, up_luz VARCHAR(9), up_comida VARCHAR(9), up_agua VARCHAR(9))
BEGIN
	IF((up_dinheiro) IS NULL) THEN SET up_dinheiro = (SELECT dinheiro FROM tb_diario); END IF;
	IF((up_luz) IS NULL) THEN SET up_luz = (SELECT luz FROM tb_diario); END IF;
	IF((up_comida) IS NULL) THEN SET up_comida = (SELECT comida FROM tb_diario); END IF;
	IF((up_agua) IS NULL) THEN SET up_agua = (SELECT agua FROM tb_diario); END IF;

	UPDATE tb_diario
    SET dinheiro = up_dinheiro,
		luz = up_luz,
		comida = up_comida,
		agua = up_agua
	WHERE id_diario = up_id;
END //
DELIMITER ;