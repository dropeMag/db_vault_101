/*----------------------------------------------------
TB_QUARTO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_quarto(up_id INTEGER, up_descricao VARCHAR(50), up_tamanho INTEGER)
BEGIN
	DECLARE var_descricao VARCHAR(50);
	DECLARE var_tamanho INTEGER;
    
    IF((SELECT id_quarto FROM tb_quartos WHERE id_quarto = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_quarto não existe.';
    ELSEIF (fn_calcula_tamanho_string(up_descricao) < 4) OR (NOT NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	ELSEIF up_tamanho NOT BETWEEN 1 AND 3 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tamanho inválido para o quarto.';
	ELSE
		IF (up_descricao IS NULL) THEN
			SET var_descricao = (SELECT descricao FROM tb_quartos WHERE id_quarto = up_id);
		ELSE
			SET var_descricao = up_descricao;
		END IF;
        
		IF (up_tamanho IS NULL) THEN
			SET var_tamanho = (SELECT tamanho FROM tb_quartos WHERE id_quarto = up_id);
		ELSE
			SET var_tamanho = up_tamanho;
		END IF;
        
		UPDATE tb_quartos
        SET descricao = var_descricao,
			tamanho = var_tamanho
		WHERE id_quarto = up_id;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ROUPA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_roupa(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF ((SELECT id_roupa FROM tb_roupa WHERE id_roupa = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_roupa não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = up_id);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_ARMA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_arma(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF((SELECT id_arma FROM tb_arma WHERE id_arma = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_arma não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = up_id);
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PET
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_pet(up_id INTEGER, up_qnt INTEGER)
BEGIN
	IF((SELECT id_pet FROM tb_pet WHERE id_pet = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_pet não existe.';
	ELSEIF (up_qnt < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade mínima é 0.';
	ELSE
        UPDATE tb_estoque
        SET quantidade = up_qnt
        WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = up_id);
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_PROFISSAO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_profissao(up_id INTEGER, up_profissao VARCHAR(25))
BEGIN
	IF(fn_calcula_tamanho_string(up_profissao) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tamanho do nome é inválido';
	ELSEIF((SELECT id_profissao FROM tb_profissao WHERE id_profissao = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_profissao não existe';
	ELSE
		UPDATE tb_profissao
        SET nome = up_profissao
        WHERE id_profissao = up_id;
    END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_BAIXA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_baixa(up_id INTEGER, up_habitante INTEGER, up_data DATETIME, up_incidente INTEGER, up_quest BOOLEAN)
BEGIN
	IF((SELECT id_baixa FROM tb_baixa WHERE id_baixa = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_baixa não existe.';
	END IF;

	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras';
	END IF;
    
	IF(up_incidente IS NULL) THEN
		SET up_incidente = (SELECT id_incidente FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = up_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe';
	END IF;

	IF(up_quest IS NULL) THEN
		SET up_quest = (SELECT quest FROM tb_baixa WHERE id_baixa = up_id);
	ELSEIF(up_quest NOT IN (0, 1)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "A 'quest' só aceita valores booleanos.";
	END IF;
    
	IF((SELECT id_habitante FROM tb_habitante WHERE id_habitante = up_habitante) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante não foi localizado.';
	ELSEIF(up_habitante IS NULL) THEN
		UPDATE tb_baixa
		SET data = up_data,
			id_incidente = up_incidente,
			quest = up_quest
		WHERE id_baixa = up_id;
	ELSE
		UPDATE tb_habitante
		SET status = 0,
			id_baixa = NULL
		WHERE id_baixa = up_id;            

        UPDATE tb_habitante
		SET status = 1,
			id_baixa = up_id
		WHERE id_habitante = up_habitante;
		
		UPDATE tb_baixa
		SET data = up_data,
			id_incidente = up_incidente,
			quest = up_quest
		WHERE id_baixa = up_id;
	END IF;
END //
DELIMITER ;




/*----------------------------------------------------
TB_INCIDENTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_incidente(up_id INTEGER, up_data DATETIME, up_tipo_incidente INTEGER)
BEGIN
	IF((SELECT id_incidente FROM tb_incidentes WHERE id_incidente = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_incidente não existe.';
	END IF;
    
    IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_incidentes WHERE id_incidente = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
    IF(up_tipo_incidente IS NULL) THEN
		SET up_tipo_incidente = (SELECT id_tipo_incidente FROM tb_incidentes WHERE id_incidente = up_id);
	ELSEIF((SELECT id_incidente FROM tb_tipo_incidente WHERE id_incidente = up_tipo_incidente) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O tipo de incidente não existe.';
	END IF;

	UPDATE tb_incidentes
    SET data = up_data,
		id_tipo_incidente = up_tipo_incidente
	WHERE id_incidente = up_id;
END //
DELIMITER ;




/*----------------------------------------------------
TB_QUEST
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_quest(up_id INTEGER, up_descricao VARCHAR(50), up_data DATETIME)
BEGIN
	IF((SELECT id_quest FROM tb_quest WHERE id_quest = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_quest não existe.';
	END IF;
    
	IF(up_descricao IS NULL) THEN
		SET up_descricao = (SELECT descricao FROM tb_quest WHERE id_quest = up_id);
	ELSEIF fn_calcula_tamanho_string(up_descricao) < 10 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Descrição inválida; Muito curta.';
	END IF;
    
    IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_quest WHERE id_quest = up_id);
	ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;

	UPDATE tb_quest
    SET data = up_data,
		descricao = up_descricao
	WHERE id_quest = up_id;
END //
DELIMITER ;




/*----------------------------------------------------
TB_HABITANTE
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_atualizador(at_roupa INTEGER, at_arma INTEGER, at_pet INTEGER)
BEGIN
	DECLARE roupa_estoque INTEGER;
	DECLARE arma_estoque INTEGER;
	DECLARE pet_estoque INTEGER;
    SET roupa_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = at_roupa));
    SET arma_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = at_arma));
    SET pet_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = at_pet));

	IF(at_roupa IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = roupa_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = at_roupa);
    END IF;
    
    IF(at_arma IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = arma_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = at_arma);
    END IF;
    
    IF(at_pet IS NOT NULL) THEN
		UPDATE tb_estoque
        SET quantidade = pet_estoque - 1
        WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = at_pet);
	END IF;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_update_habitante(up_id INTEGER, up_nome VARCHAR(25), up_level INTEGER, up_profissao INTEGER, up_roupa INTEGER, up_arma INTEGER, up_pet INTEGER, up_quarto INTEGER)
BEGIN
	IF ((SELECT id_habitante FROM tb_habitante WHERE id_habitante = up_id) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O id_habitante não existe.';
	END IF;

	IF(fn_calcula_tamanho_string(up_nome) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Nome inválido; Muito curto.';
	END IF;
	
    IF(up_level IS NULL) THEN
		SET up_level = (SELECT level FROM tb_habitante WHERE id_habitante = up_id);
	ELSEIF(up_level < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está abaixo do mínimo permitido.';
	ELSEIF(up_level > 50) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O level está acima do máximo permitido.';
	END IF;
    
    IF(up_profissao IS NULL) THEN
		SET up_profissao = NULL;
	ELSEIF((SELECT id_profissao FROM tb_habitante WHERE id_habitante = up_id) = up_profissao) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa profissão.';
    ELSEIF((SELECT id_profissao FROM tb_profissao WHERE id_profissao = up_profissao) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta profissão não existe.';
    END IF;
    
    IF(up_roupa IS NULL) THEN
		SET up_roupa = NULL;
	ELSEIF((SELECT id_roupa FROM tb_habitante WHERE id_habitante = up_id) = up_roupa) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa roupa.';
    ELSEIF((SELECT id_roupa FROM tb_roupa WHERE id_roupa = up_roupa) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta roupa não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_roupa WHERE id_roupa = up_roupa)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem esta roupa no estoque.';
    END IF;

    IF(up_arma IS NULL) THEN
		SET up_arma = NULL;
	ELSEIF((SELECT id_arma FROM tb_habitante WHERE id_habitante = up_id) = up_arma) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com essa arma.';
    ELSEIF((SELECT id_arma FROM tb_arma WHERE id_arma = up_arma) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Esta arma não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_arma WHERE id_arma = up_arma)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem esta arma no estoque.';
    END IF;
    
    IF(up_pet IS NULL) THEN
		SET up_pet = NULL;
	ELSEIF((SELECT id_pet FROM tb_habitante WHERE id_habitante = up_id) = up_pet) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está com esse pet.';
    ELSEIF((SELECT id_pet FROM tb_pet WHERE id_pet = up_pet) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este pet não existe.';
	ELSEIF((SELECT quantidade FROM tb_estoque WHERE id_estoque = (SELECT id_estoque FROM tb_pet WHERE id_pet = up_pet)) = 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não tem este pet no estoque.';
    END IF;
    
    IF(up_quarto IS NULL) THEN
		SET up_quarto = NULL;
	ELSEIF((SELECT id_quarto FROM tb_habitante WHERE id_habitante = up_id) = up_quarto) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O habitante já está nesse quarto.';
    ELSEIF((SELECT id_quarto FROM tb_quarto WHERE id_quarto = up_quarto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este quarto não existe.';
    END IF;
    
	UPDATE tb_habitante
	SET nome = up_nome,
		level = up_level,
        id_profissao = up_profissao,
        id_roupa = up_roupa, 
        id_arma = up_arma, 
        id_pet = up_pet, 
        id_quarto = up_quarto
	WHERE id_habitante = up_id;
    
    CALL sp_atualizador(up_roupa, up_arma, up_pet);
END //
DELIMITER ;




/*----------------------------------------------------
TB_VENDA
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_venda(up_id INTEGER, up_produto INTEGER, up_lucro INTEGER, up_data DATETIME, up_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
	DECLARE quantidade_antiga INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = up_produto);
    SET quantidade_antiga = (SELECT quantidade FROM tb_venda WHERE id_venda = up_id);

	IF(up_produto IS NULL) THEN
		SET up_produto = (SELECT id_produto FROM tb_venda WHERE id_venda = up_id);
    ELSEIF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = up_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	END IF;
    
	IF(up_lucro IS NULL) THEN
		SET up_lucro = (SELECT lucro FROM tb_venda WHERE id_venda = up_id);
	ELSEIF(up_lucro < 0) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido lucro negativo.';
	END IF;
    
	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_venda WHERE id_venda = up_id);
    ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
	IF(up_quantidade IS NULL) THEN
		SET up_quantidade = (SELECT quantidade FROM tb_venda WHERE id_venda = up_id);
    ELSEIF(up_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
    ELSEIF((produto_estoque + quantidade_antiga) < up_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da venda é inválida.';
	END IF;

    UPDATE tb_venda
    SET id_produto = up_produto,
		lucro = up_lucro,
        data = up_data,
        quantidade = up_quantidade
	WHERE id_venda = up_id;

	UPDATE tb_estoque
	SET quantidade = (produto_estoque - (up_quantidade - quantidade_antiga))
	WHERE id_estoque = up_produto;
END //
DELIMITER ;




/*----------------------------------------------------
TB_RECICLAGEM
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_reciclagem(up_id INTEGER, up_produto INTEGER, up_lucro VARCHAR(100), up_data DATETIME, up_quantidade INTEGER)
BEGIN
	DECLARE produto_estoque INTEGER;
	DECLARE quantidade_antiga INTEGER;
    SET produto_estoque = (SELECT quantidade FROM tb_estoque WHERE id_estoque = up_produto);
    SET quantidade_antiga = (SELECT quantidade FROM tb_reciclagem WHERE id_reciclagem = up_id);

	IF(up_produto IS NULL) THEN
		SET up_produto = (SELECT id_produto FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF((SELECT id_estoque FROM tb_estoque WHERE id_estoque = up_produto) IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Este produto não consta no estoque';
	END IF;
    
	IF(up_lucro IS NULL) THEN
		SET up_lucro = (SELECT lucro FROM tb_reciclagem WHERE id_reciclagem = up_id);
	ELSEIF(fn_calcula_tamanho_string(in_lucro) < 5) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'O lucro é inválido; Muito curto.';
	END IF;
    
	IF(up_data IS NULL) THEN
		SET up_data = (SELECT data FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF(up_data > NOW()) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido datas futuras.';
	END IF;
    
	IF(up_quantidade IS NULL) THEN
		SET up_quantidade = (SELECT quantidade FROM tb_reciclagem WHERE id_reciclagem = up_id);
    ELSEIF(up_quantidade < 1) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Não é permitido quantidades nulas ou negativas.';
    ELSEIF((produto_estoque + quantidade_antiga) < up_quantidade) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'A quantidade da reciclagem é inválida.';
	END IF;

    UPDATE tb_reciclagem
    SET id_produto = up_produto,
		lucro = up_lucro,
        data = up_data,
        quantidade = up_quantidade
	WHERE id_reciclagem = up_id;

	UPDATE tb_estoque
	SET quantidade = (produto_estoque - (up_quantidade - quantidade_antiga))
	WHERE id_estoque = up_produto;
END //
DELIMITER ;




/*----------------------------------------------------
TB_DIARIO
----------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE sp_update_diario(up_id INTEGER, up_dinheiro INTEGER, up_luz VARCHAR(9), up_comida VARCHAR(9), up_agua VARCHAR(9))
BEGIN
	IF((up_dinheiro) IS NULL) THEN SET up_dinheiro = (SELECT dinheiro FROM tb_diario); END IF;
	IF((up_luz) IS NULL) THEN SET up_luz = (SELECT luz FROM tb_diario); END IF;
	IF((up_comida) IS NULL) THEN SET up_comida = (SELECT comida FROM tb_diario); END IF;
	IF((up_agua) IS NULL) THEN SET up_agua = (SELECT agua FROM tb_diario); END IF;

	UPDATE tb_diario
    SET dinheiro = up_dinheiro,
		luz = up_luz,
		comida = up_comida,
		agua = up_agua
	WHERE id_diario = up_id;
END //
DELIMITER ;