DELIMITER //
CREATE FUNCTION fn_verify_special(in_str INTEGER, in_per INTEGER, in_end INTEGER, in_cha INTEGER, in_int INTEGER, in_agi INTEGER, in_luc INTEGER, in_category VARCHAR(10))
RETURNS BOOL
DETERMINISTIC
BEGIN
	CASE
		WHEN in_str < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Strengh can not be negative.';
		WHEN in_per < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Perception can not be negative.';
		WHEN in_end < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Endurance can not be negative.';
		WHEN in_cha < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Charisma can not be negative.';
		WHEN in_int < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Intelligence can not be negative.';
		WHEN in_agi < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Agility can not be negative.';
		WHEN in_luc < 0 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Luck can not be negative.';

		WHEN in_str > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Strengh can not be more than 10.';
		WHEN in_per > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Perception can not be more than 10.';
		WHEN in_end > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Endurance can not be more than 10.';
		WHEN in_cha > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Charisma can not be more than 10.';
		WHEN in_int > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Intelligence can not be more than 10.';
		WHEN in_agi > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Agility can not be more than 10.';
		WHEN in_luc > 10 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Luck can not be more than 10.';
        WHEN (LOWER(in_category) NOT IN ("outfit", "dweller")) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Category is invalid.';
        
        ELSE
            RETURN TRUE;  
	END CASE;
END//
DELIMITER ;



DELIMITER //
CREATE FUNCTION fn_calculate_outfit(ct_outfit INTEGER)
RETURNS BOOL
READS SQL DATA
BEGIN
    SET @count_outfit_storage = (SELECT quantity FROM tb_outfit WHERE id_outfit = ct_outfit);
    SET @count_outfit_dweller = (SELECT COUNT(*) FROM tb_dweller WHERE id_outfit = ct_outfit);
    
    CASE
		WHEN (ct_outfit IS NULL) THEN
			RETURN FALSE;
		WHEN (@count_outfit_storage IS NULL) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Outfit does not exists.';
		WHEN (@count_outfit_storage = @count_outfit_dweller) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Out of stock for this outfit.';
		ELSE
			RETURN TRUE;
    END CASE;
END //
DELIMITER ;



DELIMITER //
CREATE FUNCTION fn_calculate_weapon(ct_weapon INTEGER)
RETURNS BOOL
READS SQL DATA
BEGIN
    SET @count_weapon_storage = (SELECT quantity FROM tb_weapon WHERE id_weapon = ct_weapon);
    SET @count_weapon_dweller = (SELECT COUNT(*) FROM tb_dweller WHERE id_weapon = ct_weapon);
    
    CASE
		WHEN (ct_weapon IS NULL) THEN
			RETURN FALSE;
		WHEN (@count_weapon_storage IS NULL) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Weapon does not exists.';
		WHEN (@count_weapon_storage = @count_weapon_dweller) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Out of stock for this weapon.';
		ELSE
			RETURN TRUE;
    END CASE;
END //
DELIMITER ;



DELIMITER //
CREATE FUNCTION fn_calculate_pet(ct_pet INTEGER)
RETURNS BOOL
READS SQL DATA
BEGIN
    SET @count_pet_storage = (SELECT quantity FROM tb_pet WHERE id_pet = ct_pet);
    SET @count_pet_dweller = (SELECT COUNT(*) FROM tb_dweller WHERE id_pet = ct_pet);
    
    CASE
		WHEN (ct_pet IS NULL) THEN
			RETURN FALSE;
		WHEN (@count_pet_storage IS NULL) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Pet does not exists.';
		WHEN (@count_pet_storage = @count_pet_dweller) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Out of stock for this pet.';
		ELSE
			RETURN TRUE;
    END CASE;
END //
DELIMITER ;